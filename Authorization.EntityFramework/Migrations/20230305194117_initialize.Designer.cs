// <auto-generated />
using System;
using Authorization.EntityFramework.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Authorization.EntityFramework.Migrations
{
    [DbContext(typeof(DbBuilderContext))]
    [Migration("20230305194117_initialize")]
    partial class initialize
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Authorization.EntityFramework.Models.AuthorizationModel.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("14386d4e-c58c-49dc-9434-4126f4fe4af8"),
                            ConcurrencyStamp = "7a3e27cc-ceaf-401f-9f29-b5961acb279e",
                            Name = "admin"
                        },
                        new
                        {
                            Id = new Guid("46850fe0-1db7-4bfd-b11c-28b5cd0cb343"),
                            ConcurrencyStamp = "f90d94f4-0629-48c7-95b2-62689945f5ac",
                            Name = "manager"
                        });
                });

            modelBuilder.Entity("Authorization.EntityFramework.Models.AuthorizationModel.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8f41243a-9a54-434b-81ec-8a6573fbb61e"),
                            AccessFailedCount = 0,
                            Age = 0,
                            ConcurrencyStamp = "309f04ce-d5c5-436a-a86c-31aedfc8b391",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "ACBD9AB2F68BEA3F5291F825416546A1",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "EdharBalian"
                        },
                        new
                        {
                            Id = new Guid("e9c921f9-5bbb-45ee-8b68-641d2ff3efc4"),
                            AccessFailedCount = 0,
                            Age = 0,
                            ConcurrencyStamp = "168b1b36-1fdc-457b-b598-908ff1477c94",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "ACBD9AB2F68BEA3F5291F825416546A1",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Authorization.EntityFramework.Models.AuthorizationModel.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9de38fa6-b5c8-4791-af33-21c46b04b103"),
                            RoleId = new Guid("14386d4e-c58c-49dc-9434-4126f4fe4af8"),
                            UserId = new Guid("e9c921f9-5bbb-45ee-8b68-641d2ff3efc4")
                        },
                        new
                        {
                            Id = new Guid("e44e2196-b659-4ffc-942d-4195dea2f2ee"),
                            RoleId = new Guid("46850fe0-1db7-4bfd-b11c-28b5cd0cb343"),
                            UserId = new Guid("8f41243a-9a54-434b-81ec-8a6573fbb61e")
                        });
                });

            modelBuilder.Entity("Authorization.EntityFramework.Models.AuthorizationModel.UserRole", b =>
                {
                    b.HasOne("Authorization.EntityFramework.Models.AuthorizationModel.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Authorization.EntityFramework.Models.AuthorizationModel.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Authorization.EntityFramework.Models.AuthorizationModel.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Authorization.EntityFramework.Models.AuthorizationModel.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
